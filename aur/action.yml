name: 'Build AUR Package'
description: 'Builds a package from the AUR, signs it, and creates a workflow artifact.'
author: 'Gemini'

inputs:
  host:
    description: 'Remote server hostname'
    required: true
  name:
    description: 'The name of the package in the Arch User Repository (AUR).'
    required: true
  format:
    description: 'PM Format (e.g., pacman_mingw, pacman).'
    required: true
  repo:
    description: 'Override "format" as target folder'
    required: false
    default: ''
  deps:
    description: 'Comma-separated list of dependencies.'
    required: false
  gpg_key:
    description: 'ASCII-armored GPG private key for signing the package.'
    required: false
  gpg_keyid:
    description: 'The Key ID or fingerprint of the GPG key to use for signing.'
    required: false
  gpg_pass:
    description: 'The passphrase for the GPG key.'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Prepare enviroment vars
      id: mkenv
      shell: sh
      run: |
        VERSION=${GITHUB_REF_NAME#v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV

        # Set PREFIX based on format
        if [ "${{ inputs.format }}" = "pacman_mingw" ]; then
          echo "PREFIX=/mingw64" >> $GITHUB_ENV
        else
          echo "PREFIX=/usr" >> $GITHUB_ENV
        fi

        arch="$(uname -m)"
        echo "arch=$arch" >> $GITHUB_ENV
        echo "iden=${{ inputs.name }}-${{ inputs.format }}-$arch" >> $GITHUB_ENV
        echo "ofile=${{ inputs.name }}-$VERSION-${{ inputs.format }}-$arch" >> $GITHUB_ENV

        if test -z "${{ inputs.repo }}"; then
          REPO=${{ inputs.format }}
        else
          REPO=${{ inputs.repo }}
        fi
        echo "REPO=$REPO" >> $GITHUB_ENV

        REPO_NAME="$(echo ${{ inputs.host }} | tr -d '.')"
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

    - name: Add Repo (PACMAN)
      if: inputs.format == 'pacman' || inputs.format == 'pacman_mingw'
      shell: sh
      run: |
        URL="https://${{ inputs.host }}/${{ env.REPO }}"
        URL="$URL/x86_64/${{ env.REPO_NAME }}.db"
        if curl -sSf --http1.1 --ipv4 --connect-timeout 3 --max-time 6 -r 0-0 -o /dev/null "$URL"; then
          cat <<EOF | tee -a /etc/pacman.conf
        [${{ env.REPO_NAME }}]
        SigLevel = Never
        Server = https://${{ inputs.host }}/${{ env.REPO }}/\$arch
        EOF
        fi

        pacman -Sy --noconfirm

    - name: Install prerequisites (PACMAN)
      if: inputs.format == 'pacman' || inputs.format == 'pacman_mingw'
      shell: sh
      run: |
        deps="${{ inputs.deps }}"
        echo "deps=$deps" > $GITHUB_ENV

        pacman -Sy --noconfirm --overwrite base-devel git tar gzip zstd
        if [ -n "$deps" ]; then
          pacman -S --noconfirm --overwrite "*" $(echo "$deps" | tr ',' ' ')
        fi

    - name: Loopback GPG entry
      if: inputs.gpg_key != ''
      run: |
        echo "Importing GPG KEY"
        export GPG_TTY=$(tty || true)
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        gpgconf --kill gpg-agent
        gpgconf --launch gpg-agent
        echo "${{ inputs.gpg_key }}" | sudo -u builder gpg --batch --yes --import
        echo "%_gpg_name ${{ inputs.gpg_keyid }}" > ~/.rpmmacros
        export GPG_OPTS="--pinentry-mode loopback --passphrase ${{ inputs.gpg_pass }}"
      shell: sh

    - name: Build AUR Package
      shell: bash
      run: |
        # This entire script is executed as the 'builder' user
        sudo -u builder bash -s -- \
          "${{ inputs.name }}" \
          "${{ inputs.gpg_key }}" \
          "${{ inputs.gpg_keyid }}" \
          "${{ inputs.gpg_pass }}" <<'SCRIPT'
        
        # Assign arguments to variables
        PACKAGE_NAME="$1"
        GPG_KEY="$2"
        GPG_KEYID="$3"
        GPG_PASSPHRASE="$4"
        
        git clone --depth=1 "https://aur.archlinux.org/$PACKAGE_NAME.git"
        cd "$PACKAGE_NAME"

        KEYIDS=$(makepkg --printsrcinfo | grep 'validpgpkeys = ' | awk '{print $3}')
        if [ -n "$KEYIDS" ]; then
            gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys $KEYIDS
        fi
        

        # Now, makepkg will find the key and succeed
        export CMAKE_POLICY_VERSION_MINIMUM=3.5
        makepkg -s --noconfirm

        PKG_FILE=$(find . -maxdepth 1 -name "*.pkg.tar.zst")
        gpg --batch --yes --pinentry-mode loopback \
            --passphrase "$GPG_PASSPHRASE" \
            --detach-sign --armor -u "$GPG_KEYID" "$PKG_FILE"
        
        echo "âœ… Package build complete."
        SCRIPT

    - name: Stage Artifacts
      shell: sh
      run: |
        mkdir -p ${{ env.iden }}
        echo "Moving built packages to artifact directory..."
        mv ./${{ inputs.name }}/*.pkg.tar.zst* ${{ env.iden }}/
        echo "Contents of artifact directory:"
        ls -l ${{ env.iden }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.iden }}
        path: ${{ env.iden }}/*
